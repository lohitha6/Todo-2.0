pipeline {
    agent any
    
    environment {
        DOCKER_REPO = 'lohitha12100706/flask-todo-app'
        DOCKER_CREDS = credentials('dockerhub-credentials')
        KUBE_CONFIG = credentials('kubeconfig')
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    triggers {
        pollSCM('H/5 * * * *')
    }
    
    stages {
        stage('Checkout') {
            when {
               anyOf {
                   branch 'main'
                   branch  'Develop' 
                   }
                   }
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                }
            }
        }
       
    stage('SonarCloud Analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:latest'
                }
            }
            
    steps {
                withSonarQubeEnv('SonarCloud') {
                    sh '''
                        sonar-scanner \
                          -Dsonar.projectKey=Todo-2.0 \
                          -Dsonar.organization=lohitha6 \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=https://sonarcloud.io \
                          -Dsonar.login=$SONAR_TOKEN
                    '''
                }
            }
        }


     
        
        stage('Docker Build') {
             when {
               anyOf {
                   branch 'main'
                   branch  'Develop' 
                   }
                   }
            steps {
                script {
                    def image = docker.build("${DOCKER_REPO}:${IMAGE_TAG}")
                    docker.build("${DOCKER_REPO}:latest")
                }
            }
        }
        
        stage('Push to Docker Hub') {
             when {
               anyOf {
                   branch 'main'
                   branch  'Develop' 
                   }
                   }
            steps {
                script {
                    docker.withRegistry('', 'dockerhub-credentials') {
                        docker.image("${DOCKER_REPO}:${IMAGE_TAG}").push()
                        docker.image("${DOCKER_REPO}:latest").push()
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
             when {
               anyOf {
                   branch 'main'
                   branch  'Develop' 
                   }
                   }
            steps {
                withKubeConfig([credentialsId: 'kubeconfig']) {
                    sh """
                        helm upgrade --install flask-todo-app ./helm-chart \
                            --set image.repository=${DOCKER_REPO} \
                            --set image.tag=${IMAGE_TAG} \
                            --namespace production \
                            --create-namespace
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo "✅ Build ${BUILD_NUMBER} completed successfully"
            echo "✅ Build ${BUILD_NUMBER} deployed successfully"
            echo "Docker: ${DOCKER_REPO}:${IMAGE_TAG}"
        }
        failure {
            echo "❌ Build ${BUILD_NUMBER} failed"
        }
    }
}
